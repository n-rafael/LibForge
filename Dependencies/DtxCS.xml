<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DtxCS</name>
    </assembly>
    <members>
        <member name="T:DtxCS.Builtins">
            <summary>
            Builtin functions, in case I end up writing an interpreter.
            </summary>
        </member>
        <member name="T:DtxCS.DataTypes.DataArray">
            <summary>
            Represents an array of DataNodes.
            </summary>
        </member>
        <member name="P:DtxCS.DataTypes.DataArray.Type">
            <summary>
            Returns DataType.ARRAY
            </summary>
        </member>
        <member name="P:DtxCS.DataTypes.DataArray.Children">
            <summary>
            The children of this array.
            </summary>
        </member>
        <member name="M:DtxCS.DataTypes.DataArray.#ctor">
            <summary>
            Default constructor for a Data Array.
            </summary>
        </member>
        <member name="M:DtxCS.DataTypes.DataArray.AddNode``1(``0)">
            <summary>
            Add a node to this Array.
            </summary>
            <param name="node">Node to add</param>
            <returns>The added node.</returns>
        </member>
        <member name="P:DtxCS.DataTypes.DataArray.Item(System.Int32)">
            <summary>
            Get or set the child of this array at the given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:DtxCS.DataTypes.DataArray.Array(System.Int32)">
            <summary>
            Find the array in this array's children at the given index.
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:DtxCS.DataTypes.DataArray.Int(System.Int32)">
            <summary>
            Find the integer in this array's children at the given index.
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:DtxCS.DataTypes.DataArray.Float(System.Int32)">
            <summary>
            Find the float in this array's children at the given index.
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:DtxCS.DataTypes.DataArray.String(System.Int32)">
            <summary>
            Find the string in this array's children at the given index.
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:DtxCS.DataTypes.DataArray.Symbol(System.Int32)">
            <summary>
            Find the symbol in this array's children at the given index.
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:DtxCS.DataTypes.DataArray.Var(System.Int32)">
            <summary>
            Find the variable in this array's children at the given index.
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:DtxCS.DataTypes.DataArray.Any(System.Int32)">
            <summary>
            Finds any node at the given index and returns it as a string.
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:DtxCS.DataTypes.DataArray.Array(System.String)">
            <summary>
            Find the first array in this array's children whose name matches.
            If none is found, returns null.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:DtxCS.DataTypes.DataArray.Name">
            <summary>
            The string representation of the first element of the array, unless
            that element is another array, which would result in an empty string.
            </summary>
        </member>
        <member name="P:DtxCS.DataTypes.DataArray.Count">
            <summary>
            The number of elements in this array.
            </summary>
        </member>
        <member name="M:DtxCS.DataTypes.DataArray.ToString">
            <summary>
            The string representation of this Array, suitable for putting right
            back into a .dta file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DtxCS.DataTypes.DataCommand.EvalAll">
            <summary>
            Returns a copy of this datacommand with all children evaulated.
            </summary>
        </member>
        <member name="T:DtxCS.DataTypes.DataAtom">
            <summary>
            The most basic element of dta.
            </summary>
        </member>
        <member name="P:DtxCS.DataTypes.DataAtom.Type">
            <summary>
            The type of this Atom.
            </summary>
        </member>
        <member name="P:DtxCS.DataTypes.DataAtom.Int">
            <summary>
            The value of this Atom.
            </summary>
        </member>
        <member name="P:DtxCS.DataTypes.DataAtom.Float">
            <summary>
            The value of this Atom.
            </summary>
        </member>
        <member name="P:DtxCS.DataTypes.DataAtom.String">
            <summary>
            The value of this Atom.
            </summary>
        </member>
        <member name="M:DtxCS.DataTypes.DataAtom.#ctor(System.String)">
            <summary>
            Construct an Atom whose value is a string or symbol.
            </summary>
            <param name="data">The value assigned to this atom.</param>
        </member>
        <member name="M:DtxCS.DataTypes.DataAtom.#ctor(System.Int32)">
            <summary>
            Construct an Atom whose value is an integer.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:DtxCS.DataTypes.DataAtom.#ctor(System.Single)">
            <summary>
            Construct an Atom whose value is a floating-point value.
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:DtxCS.DataTypes.DataAtom.Name">
            <summary>
            The string representation of this Atom.
            </summary>
        </member>
        <member name="M:DtxCS.DataTypes.DataAtom.ToString">
            <summary>
            Returns the string representation of this Atom.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DtxCS.DataTypes.DataVariable.#ctor(System.String,DtxCS.DataTypes.DataNode)">
            <summary>
            Makes a data variable. Scoping not implemented because we're not an interpreter.
            Don't give this the $.
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:DtxCS.DataTypes.DataType">
            <summary>
            Represents the possible types of values in a DataArray.
            </summary>
        </member>
        <member name="F:DtxCS.DataTypes.DataType.INT">
            <summary>
            Integral value.
            </summary>
        </member>
        <member name="F:DtxCS.DataTypes.DataType.FLOAT">
            <summary>
            Floating point value.
            </summary>
        </member>
        <member name="F:DtxCS.DataTypes.DataType.VARIABLE">
            <summary>
            $-prefixed variable type
            </summary>
        </member>
        <member name="F:DtxCS.DataTypes.DataType.SYMBOL">
            <summary>
            Symbol value.
            </summary>
        </member>
        <member name="F:DtxCS.DataTypes.DataType.EMPTY">
            <summary>
            '()
            </summary>
        </member>
        <member name="F:DtxCS.DataTypes.DataType.IFDEF">
            <summary>
            #ifdef directive
            </summary>
        </member>
        <member name="F:DtxCS.DataTypes.DataType.ELSE">
            <summary>
            #else directive
            </summary>
        </member>
        <member name="F:DtxCS.DataTypes.DataType.ENDIF">
            <summary>
            #endif directive
            </summary>
        </member>
        <member name="F:DtxCS.DataTypes.DataType.ARRAY">
            <summary>
            Array.
            </summary>
        </member>
        <member name="F:DtxCS.DataTypes.DataType.COMMAND">
            <summary>
            {}-enclosed function call
            </summary>
        </member>
        <member name="F:DtxCS.DataTypes.DataType.STRING">
            <summary>
            ""-enclosed String value.
            </summary>
        </member>
        <member name="F:DtxCS.DataTypes.DataType.MACRO">
            <summary>
            []-enclosed macro definition
            </summary>
        </member>
        <member name="F:DtxCS.DataTypes.DataType.DEFINE">
            <summary>
            #define directive
            </summary>
        </member>
        <member name="F:DtxCS.DataTypes.DataType.INCLUDE">
            <summary>
            #include directive
            </summary>
        </member>
        <member name="F:DtxCS.DataTypes.DataType.MERGE">
            <summary>
            #merge directive
            </summary>
        </member>
        <member name="F:DtxCS.DataTypes.DataType.IFNDEF">
            <summary>
            #ifndef directive
            </summary>
        </member>
        <member name="F:DtxCS.DataTypes.DataType.AUTORUN">
            <summary>
            #autorun directive
            </summary>
        </member>
        <member name="F:DtxCS.DataTypes.DataType.UNDEF">
            <summary>
            #undef directive
            </summary>
        </member>
        <member name="T:DtxCS.DataTypes.DataNode">
            <summary>
            Represents the basic element of DTA, which could be an Atom or an Array.
            </summary>
        </member>
        <member name="P:DtxCS.DataTypes.DataNode.Parent">
            <summary>
            The parent of this data node. If null, this is a root node.
            </summary>
        </member>
        <member name="P:DtxCS.DataTypes.DataNode.Name">
            <summary>
            The name of this data node.
            </summary>
        </member>
        <member name="P:DtxCS.DataTypes.DataNode.Type">
            <summary>
            The type of this data node.
            </summary>
        </member>
        <member name="M:DtxCS.DataTypes.DataNode.Evaluate">
            <summary>
            Evaluate this node to get a value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DtxCS.DTX">
            <summary>
            Represents a .dta/.dtx file.
            </summary>
        </member>
        <member name="M:DtxCS.DTX.FromPlainTextBytes(System.Byte[])">
            <summary>
            Parses a plaintext DTA given its bytes in a byte array. If an encoding tag is set, tries to use the correct encoding.
            </summary>
            <param name="dtaBytes"></param>
            <returns></returns>
        </member>
        <member name="M:DtxCS.DTX.FromDtaString(System.String)">
            <summary>
            Parses the entirety of a .dta file in plain text into a DataArray.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:DtxCS.DTX.FromDtaStream(System.IO.Stream)">
            <summary>
            Parses the entirety of a .dta file in a stream to a DataArray.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:DtxCS.DTX.ParseString(System.String,DtxCS.DataTypes.DataArray)">
            <summary>
            Parses the string as DTA elements, adding each one to the given root array.
            </summary>
            <param name="data">string of DTA info</param>
            <param name="root">top-level array to add the string to</param>
        </member>
        <member name="M:DtxCS.DTX.FromDtb(System.IO.Stream)">
            <summary>
            Parses a binary format (dtb) file.
            </summary>
            <param name="dtb"></param>
        </member>
        <member name="T:DtxCS.CryptStream">
            <summary>
            Provides a means to decrypt an encrypted DTB file (or any other file using this crypt method).
            </summary>
        </member>
        <member name="M:StreamExtensions.ReadInt8(System.IO.Stream)">
            <summary>
            Read a signed 8-bit integer from the stream.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:StreamExtensions.ReadUInt8(System.IO.Stream)">
            <summary>
            Read an unsigned 8-bit integer from the stream.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:StreamExtensions.ReadUInt16LE(System.IO.Stream)">
            <summary>
            Read an unsigned 16-bit little-endian integer from the stream.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:StreamExtensions.ReadInt16LE(System.IO.Stream)">
            <summary>
            Read a signed 16-bit little-endian integer from the stream.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:StreamExtensions.ReadUInt16BE(System.IO.Stream)">
            <summary>
            Read an unsigned 16-bit Big-endian integer from the stream.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:StreamExtensions.ReadInt16BE(System.IO.Stream)">
            <summary>
            Read a signed 16-bit Big-endian integer from the stream.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:StreamExtensions.ReadUInt24LE(System.IO.Stream)">
            <summary>
            Read an unsigned 24-bit little-endian integer from the stream.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:StreamExtensions.ReadInt24LE(System.IO.Stream)">
            <summary>
            Read a signed 24-bit little-endian integer from the stream.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:StreamExtensions.ReadUInt24BE(System.IO.Stream)">
            <summary>
            Read an unsigned 24-bit Big-endian integer from the stream.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:StreamExtensions.ReadInt24BE(System.IO.Stream)">
            <summary>
            Read a signed 24-bit Big-endian integer from the stream.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:StreamExtensions.ReadUInt32LE(System.IO.Stream)">
            <summary>
            Read an unsigned 32-bit little-endian integer from the stream.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:StreamExtensions.ReadInt32LE(System.IO.Stream)">
            <summary>
            Read a signed 32-bit little-endian integer from the stream.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:StreamExtensions.ReadUInt32BE(System.IO.Stream)">
            <summary>
            Read an unsigned 32-bit Big-endian integer from the stream.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:StreamExtensions.ReadInt32BE(System.IO.Stream)">
            <summary>
            Read a signed 32-bit Big-endian integer from the stream.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:StreamExtensions.ReadUInt64LE(System.IO.Stream)">
            <summary>
            Read an unsigned 64-bit little-endian integer from the stream.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:StreamExtensions.ReadInt64LE(System.IO.Stream)">
            <summary>
            Read a signed 64-bit little-endian integer from the stream.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:StreamExtensions.ReadFloat(System.IO.Stream)">
            <summary>
            Read a single-precision (4-byte) floating-point value from the stream.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:StreamExtensions.ReadASCIINullTerminated(System.IO.Stream)">
            <summary>
            Read a null-terminated ASCII string from the given stream.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:StreamExtensions.ReadLengthPrefixedString(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Read a length-prefixed string of the specified encoding type from the file.
            The length is a 32-bit little endian integer.
            </summary>
            <param name="s"></param>
            <param name="e">The encoding to use to decode the string.</param>
            <returns></returns>
        </member>
        <member name="M:StreamExtensions.ReadLengthUTF8(System.IO.Stream)">
            <summary>
            Read a length-prefixed UTF-8 string from the given stream.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:StreamExtensions.ReadBytes(System.IO.Stream,System.Int32)">
            <summary>
            Read a given number of bytes from a stream into a new byte array.
            </summary>
            <param name="s"></param>
            <param name="count">Number of bytes to read (maximum)</param>
            <returns>New byte array of size &lt;=count.</returns>
        </member>
        <member name="M:StreamExtensions.ReadMidiMultiByte(System.IO.Stream)">
            <summary>
            Read a variable-length integral value as found in MIDI messages.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
    </members>
</doc>
